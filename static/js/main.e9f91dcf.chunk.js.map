{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayname","weekday","className","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","TodoItem","onClick","React","memo","TodoListBlock","TodoList","todos","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","autoFocus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9f91dcf.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 512px;\r\n  height: 768px;\r\n\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n\r\n  margin: 0 auto;\r\n\r\n  margin-top: 95px;\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n`;\r\n\r\nfunction TodoTemplate({children}) {\r\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: '아침에 일찍 일어나기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '리액트 공부하기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 3,\r\n    text: '점심식사 하기',\r\n    done: false\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '리액트 복습하기',\r\n    done: false\r\n  },\r\n  {\r\n    id: 5,\r\n    text: '집밖에 나가지 말기',\r\n    done: false\r\n  }\r\n];\r\n\r\nfunction todoReducer(state, action){\r\n  switch(action.type){\r\n    case 'CREATE':\r\n      return state.concat(action.todo);\r\n    case 'TOGGLE':\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n          );\r\n          //todo.id와 action.id값이 같으면 todo값을 복사하고, done에 반대값을 넣어주고 아니면 냅둠\r\n    case 'REMOVE':\r\n      return state.filter(todo => todo.id !== action.id);\r\n        //todo.id값이랑 action,id값이랑 서로 다른것들만 필터링해서 return시킴\r\n        //삭제한것만 빼고 나머지 부분만 리턴시켜서 리스트에 보여줌\r\n    default:\r\n      throw new Error(`Error !! : ${action.type}`);\r\n  }\r\n}\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }){\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(6);\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n//createContext\r\n//state값과 dispatch를 context를 통해 다른 컴포넌트에서 바로 사용하게 해준다.\r\n//현재 js각 파일에서 쓰던 값들을 서로 전달할때 굉장히 편하게 사용할 수 있게 해준다.\r\n\r\n//context 하나를 만들어서 state값과 dispatch를 한꺼번에 넣어주고,  그 두개를 context를 만들어서 따로따로 만들어서 넣어줄 수 있게 사용 할 수 있다.\r\n\r\nexport function useTodoState(){\r\n  const context = useContext(TodoStateContext);\r\n  //에러 처리\r\n  if(!context){\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoDispatch(){\r\n  const context = useContext(TodoDispatchContext);\r\n  if(!context){\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoNextId(){\r\n  const context = useContext(TodoNextIdContext);\r\n  if(!context){\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n// 외부에서 함수를 사용할 수 있게 훅을 만들어준다.\r\n// TodoContext가 내부에서 랜더링이 되어야 사용가능","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding-top: 48px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n  .tasks-left {\r\n    color: #20c997;\r\n    font-size: 18px;\r\n    margin-top: 40px;\r\n    font-weight: bold;\r\n  }\r\n`; \r\n\r\nfunction TodoHead() {\r\n  const todos = useTodoState();\r\n  // console.log(todos);\r\n  const undoneTasks = todos.filter(todo => !todo.done);\r\n  \r\n  const today = new Date();\r\n  const dateString  = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric'\r\n  });\r\n\r\n  const dayname = today.toLocaleDateString('ko-KR', { weekday: 'long' });\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <h1>{dateString}</h1>\r\n      <div className=\"day\">{dayname}</div>\r\n      <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default TodoHead;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\n\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n  display: none;\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  aligin-items: center;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  &:hover {\r\n    ${Remove}{\r\n      display: initial;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 16px;\r\n  border: 1px solid #ced4da;\r\n  font-size: 24px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${props =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #38d9a9;\r\n      color: #38d9a9;\r\n    `\r\n  }\r\n  svg {\r\n    padding-left: 4px;\r\n  } \r\n`;\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color #495057;\r\n  ${props => props.done &&\r\n    css`\r\n      color: #ced4da;\r\n    `\r\n  }\r\n`;\r\n\r\nfunction TodoItem({id, done, text}) {\r\n  const dispatch = useTodoDispatch();\r\n  //토글이 이루어지게 되면 dispatch에 type을 TOGGLE로 실행하게 해준다.\r\n  const onToggle = () => dispatch({type:'TOGGLE', id});\r\n  const onRemove = () => dispatch({type:'REMOVE', id});\r\n\r\n  return (\r\n  <TodoItemBlock>\r\n    <CheckCircle done={done} onClick={onToggle}>\r\n      {done && <MdDone/>}\r\n      </CheckCircle>\r\n    <Text done={done}>{text}</Text>\r\n    <Remove onClick={onRemove}>\r\n      <MdDelete/>\r\n    </Remove>\r\n  </TodoItemBlock>\r\n  )\r\n}\r\n\r\nexport default React.memo(TodoItem);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  over-flow-y: auto;\r\n  \r\n  overflow: auto;\r\n\r\n  &::-webkit-scrollbar {\r\n    display:none;\r\n  }\r\n\r\n`;\r\n\r\nfunction TodoList() {\r\n  const todos = useTodoState();\r\n\r\n  return (\r\n    <TodoListBlock>\r\n      { todos.map(todo => (\r\n        <TodoItem key={todo.id} id={todo.id} text={todo.text} done={todo.done}/>\r\n      ))}\r\n    </TodoListBlock>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: block;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 60px;\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%);\r\n  color: white;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n  display: flex;\r\n\r\n  transition: 0.125s all ease-in;\r\n\r\n  ${props => \r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n          background: #ff8787;\r\n      }\r\n      &:active {\r\n          background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `\r\n  }\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding: 32px 32px 72px 32px;\r\n\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate() {\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState('');\r\n\r\n  const dispatch = useTodoDispatch();\r\n  const nextId = useTodoNextId();\r\n\r\n  const onToggle = () => setOpen(!open);\r\n  const onChange = e => setValue(e.target.value); // 이벤트 객체를 받아서 setValue에 저장\r\n  const onSubmit = e => {\r\n    e.preventDefault(); // 새로고침 방지\r\n    dispatch({\r\n      type: 'CREATE',\r\n      todo: {\r\n        id: nextId.current,\r\n        text: value,\r\n        done: false\r\n      }\r\n    });\r\n    setValue('');\r\n    setOpen(false);\r\n    nextId.current += 1;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <InsertFormPositioner>\r\n          <InsertForm onSubmit={onSubmit}>\r\n            <Input \r\n              autoFocus \r\n              placeholder=\"할 일을 입력 후, Enter를 누르세요.\"\r\n              onChange={onChange}\r\n              value={value}  \r\n            />\r\n          </InsertForm>\r\n        </InsertFormPositioner>\r\n      )}\r\n      <CircleButton onClick={onToggle} open={open}>\r\n        <MdAdd/>\r\n      </CircleButton>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(TodoCreate);","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider} from './TodoContext';\n\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n    &::-webkit-scrollbar {\n      display:none;\n    }\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle/>\n      <TodoTemplate>\n        <TodoHead/>\n        <TodoList/>\n        <TodoCreate/>\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}